var Generator = require('yeoman-generator');
var namespacePrompt = require('../../prompts/namespace');
var Guid = require('guid');

module.exports = class extends Generator {

    initializing() {
        this.configuration = {};
        this.globalOps = {};

        this.composeWith(require.resolve('../project-base-class'), {
            context: this
        });

        
        this.composeWith(require.resolve('../project-config'), {
            context: this
        });

        
        this.composeWith(require.resolve('../project-graphql'), {
            context: this
        });

        //last compose for write last all deps required by all sub genrators
        this.composeWith(require.resolve('../project-json'), {
            context: this
        });
    }

    prompting() {
        return this.prompt(namespacePrompt.prompts).then((answers) => {
            //call the configuration builder
            this.configuration = namespacePrompt.buildConfiguration(answers);

            //Must return the promise
            return this.prompt([{
                type: 'input',
                name: 'guid',
                message: 'Your Project Guid (Default is auto generated)',
                default: Guid.raw() // Default autogenerated
            }]).then((answers) => {
                // adds specific generator config to answers
                this.configuration.guid = answers.guid;
            });
        });
    }

    writing() {

        //generate AssemblyInfo
        this.fs.copyTpl(
            this.templatePath('Properties/AssemblyInfo.cs'),
            this.destinationPath(this.configuration.namespace + '/Properties/AssemblyInfo.cs'),
            {
                organization: this.configuration.organization,
                namespace: this.configuration.namespace,
                guid: this.configuration.guid
            }
        );

        //generate *.xproj
        this.fs.copyTpl(
            this.templatePath('namespace.xproj'),
            this.destinationPath(this.configuration.namespace + '/' + this.configuration.namespace + '.xproj'),
            {
                namespace: this.configuration.namespace,
                guid: this.configuration.guid
            }
        );
    }
    end() {
        this.log('Thanks you for using Skimia OS yeoman generators');
        this.log('Keep sync with github https://github.com/skimia/os');
    }

};
